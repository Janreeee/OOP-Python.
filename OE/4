OE#4
class Character:
    def __init__(self, name, health, power):
        self.name = name
        self.health = health
        self.power = power

    def attack(self, target):
        target.health -= self.power
        print(f"{self.name} attacks {target.name}. {target.name} has {target.health} health left.")

    def special_move(self):
        pass

    def defend(self, attacker):
        damage = attacker.power // 2
        self.health -= damage
        print(f"{self.name} defends and takes {damage} damage. {self.name} now has {self.health} health.")

class Warrior(Character):
    def __init__(self, name, health, power):
        super().__init__(name, health, power)
        self.original_power = power

    def special_move(self):
        self.power *= 2
        print(f"{self.name} uses Shield Bash! Attack power is now {self.power}.")

class Mage(Character):
    def __init__(self, name, health, power):
        super().__init__(name, health, power)

    def special_move(self):
        print(f"{self.name} casts Fireball!")
        return 100

class Archer(Character):
    def __init__(self, name, health, power):
        super().__init__(name, health, power)

    def special_move(self):
        print(f"{self.name} shoots a Piercing Arrow!")
        return self.health

class Monster(Character):
    def __init__(self, name, health, power):
        super().__init__(name, health, power)

    def special_move(self):
        self.health += 50
        print(f"{self.name} roars and gains extra health! {self.name} now has {self.health} health.")

def battle_simulation():
    warrior = Warrior("Warrior", 200, 30)
    mage = Mage("Mage", 120, 20)
    archer = Archer("Archer", 150, 25)
    monster = Monster("Monster", 300, 40)

    characters = [warrior, mage, archer]
    combatants = characters + [monster]

    for character in characters:
        character.attack(monster)
        damage = character.special_move()
        if isinstance(character, Mage):
            monster.health -= damage
        elif isinstance(character, Archer):
            monster.health -= damage
        else:
            monster.health -= character.power

    for character in characters:
        monster.attack(character)
        monster.special_move()
        monster.defend(character)

    print(f"Battle results: {monster.name} has {monster.health} health left.")
    for character in characters:
        print(f"{character.name} has {character.health} health left.")

battle_simulation()
